par(mar = c(5.1, 4.1, 4.1, 2.1))
par(mfrow = c(1,1))
hist(KK)
hist(KK, main = "Distribution of Bullseye Hits by Dr. Keaton", xlab = "Hits")
hist(CC, main = "Distribution of Bullseye Hits by Dr. Craig", xlab = "Hits")
?pnorm
pnorm(35, mean = cc_mean, sd = cc_sd)
lightbulb_mean = 2000
lightbulb_std = 200
pnorm(2400, lightbulb_mean, lightbulb_std)
pnorm(2217, lightbulb_mean, lightbulb_std) – pnorm(1851, lightbulb_mean, lightbulb_std)
pnorm(2217, lightbulb_mean, lightbulb_std)
pnorm(1851, lightbulb_mean, lightbulb_std)
pnorm(2217, lightbulb_mean, lightbulb_std) – pnorm(1851, lightbulb_mean, lightbulb_std)
prob1 = pnorm(2217, lightbulb_mean, lightbulb_std)
prob2 = pnorm(1851, lightbulb_mean, lightbulb_std)
prob1 - prob2
prob = 1 - pnorm(1965, lightbulb_mean, lightbulb_std)
prob * prob
?quantile
qnorm(.25, lightbulb_mean, lightbulb_std)
pnorm(1865.102, lightbulb_mean, lightbulb_std)
qnorm(.92, lightbulb_mean, lightbulb_std)
?sqrt
bulbs_mean = 2000 * 6
bulbs_std = sqrt(6 * (20 ** 2))
bulbs_std
pnorm(12600, bulbs_mean, bulbs_std)
sqrt(2400)
?pbinom
pbinom(2, 100, .01)
?rnorm
darts_mean = 100 * 0.1;darts_std = sqrt(darts_mean * .9);pnorm(2, k_mean, k_std)
darts_mean = 100 * 0.1;darts_std = sqrt(darts_mean * .9);pnorm(2, darts_mean, darts_std)
darts_mean = 100 * 0.01;darts_std = sqrt(darts_mean * .99);pnorm(2, darts_mean, darts_std)
pbinom(2, 100, .01)
pbinom(32, 100, .3)
darts_mean = 100 * 0.3;darts_std = sqrt(darts_mean * .7);pnorm(32, darts_mean, darts_std)
30 * .7
?dbeta
?plot
plot(dbeta(seq(0, 1, 0.01), shape1=23, shape2=2))
?plot
plot(x=seq(0, 1, 0.01),y=dbeta(seq(0, 1, 0.01), shape1=23, shape2=2))
plot(x=seq(0, 1, 0.01),y=dbeta(seq(0, 1, 0.01), shape1=23, shape2=2), type="l")
plot(x=seq(0, 1, 0.01),y=dbeta(seq(0, 1, 0.01), shape1=23, shape2=2), type="l", main = "Beta Distribution", xlab = "", ylab = "Function Result")
?sample
sample(dbeta(seq(0, 1, 0.01), 4)
y
dbeta(seq(0, 1, 0.01))
sample(dbeta(seq(0, 1, 0.01), shape1=23, shape2=2), 4)
dbeta(seq(0, 1, 0.01), shape1=23, shape2=2)
?rbeta
rbeta(4, shape1=23, shape2=2)
samp = rbeta(4, shape1=23, shape2=2)
samp
?std
??std
?mean
mean(samp)
sd(samp)
[1:1000]
1:10000
1:1000
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
?hist
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
?hist
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
?hist
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
?quantile
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
''
?quantile
means = c()
normal_quants = c()
for (i in 1:1000) {
means[i] = mean(rbeta(4, shape1=23, shape2=2))
}
means
quantile(means, 0.01)
quantile(means, 0.01)[2]
type(quantile(means, 0.01))
typeof(quantile(means, 0.01))
quantile(means, 0.01)[2]
quantile(means, 0.01)
unname(quantile(means, 0.01))
unname(quantile(means, seq(0, 1, 0.01)))
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
means
mean(means)
sd(mwans)
sd(means)
0.0532/2
std = 0.0266
mean = mean(means)
std
mean
1-pnorm(.915, mean, std)
means[means<0.915]
means[means>0.915]
count(means[means>0.915])
size(means[means>0.915])
length(means[means>0.915])
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
?qqnorm
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
means = c()
for (i in 1:1000) {
means[i] = mean(rbeta(200, shape1=23, shape2=2))
}
mean(means)
sd(means)
0.0532/sqrt(200)
mean = mean(means)
std = 0.003804724
mean = 0.92
1-pnorm(.915, mean, std)
length(means[means>.915])
PlantGrowth
bootstrapped = sample(PlantGrowth$weight[PlantGrowth$group == ‘ctrl’, replace=True)
PlantGrowth$weight[PlantGrowth$group == ‘ctrl’
PlantGrowth$weight[PlantGrowth$group == ‘ctrl’]
PlantGrowth$weight[PlantGrowth$group = ‘ctrl’]
PlantGrowth$weight[PlantGrowth$group == "ctrl"]
bootstrapped = sample(PlantGrowth$weight[PlantGrowth$group == "ctrl", replace=True)
bootstrapped = sample(PlantGrowth$weight[PlantGrowth$group == "ctrl"], replace=True)
bootstrapped = sample(PlantGrowth$weight[PlantGrowth$group == "ctrl"], replace=TRUE)
bootstrapped
?sample
bootstrapped = sample(PlantGrowth$weight[PlantGrowth$group == "ctrl"], size = 10000, replace=TRUE)
bootstrapped
hist(bootstrapped, main = “Bootstrapped Control Group Sample”, xlab=”Weight”)
hist(bootstrapped)
hist(bootstrapped, main="Bootstrapped Control Group Sample")
hist(bootstrapped, main="Bootstrapped Control Group Sample", xlab="Weight")
means = c()
for (i in 1:10000) {
means[i] = sample(PlantGrowth$weight[PlantGrowth$group == “ctrl”,  size=200, replace=True)
}
means = c()
for (i in 1:10000) {
means[i] = sample(PlantGrowth$weight[PlantGrowth$group == “ctrl”,  size=200, replace=True)
}
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
warnings()
source("C:/Users/advai/Desktop/STAT 35500/Q5a.R")
means = c()
for (i in 1:10000) {
means[i] = mean(sample(PlantGrowth$weight[PlantGrowth$group == "ctrl"],  size=200, replace=TRUE))
}
means
hist(means, main="Bootstrapped Control Group Sample Means", xlab="Mean Weight")
hist(means, main="Bootstrapped Control Group Sample Means", xlab="Mean Weight", breaks = 20)
hist(means, main="Bootstrapped Control Group Sample Means", xlab="Mean Weight", breaks = 20)
hist(means, main="Bootstrapped Control Group Sample Means", xlab="Mean Weight", breaks = 200)
hist(means, main="Bootstrapped Control Group Sample Means", xlab="Mean Weight", breaks = 75)
quantile(means, c(0.05, 0.95))
?t.test
t.test(means, conf.level=.90)$conf.in
t.test(PlantGrowth$weight[PlantGrowth$group=="ctrl"], conf.level=.90)$conf.in
darts_mean = 100 * 0.01
darts_std = sqrt(darts_mean * .99)
pnorm(2.5, darts _mean, darts _std)
darts_mean = 100 * 0.01
darts_std = sqrt(darts_mean * .99)
pnorm(2.5, darts_mean, darts_std)
darts_mean
darts_std
darts_mean = 100 * 0.3
darts_std = sqrt(darts_mean * .7)
pnorm(32.5, darts_mean, darts _std)
darts_mean = 100 * 0.3
darts_std = sqrt(darts_mean * .7)
pnorm(32.5, darts_mean, darts_std)
?pbinom
pbinom(0.01, 10)
pbinom(11, 1, 0.01)
pbinom(0, 1, 0.01)
pbinom(0, 1, 0.99)
pbinom(1, 1, 0.01)
dbinom(0, 1, 0.01)
dbinom(1, 1, 0.01)
dbinom(4, 12, 0.01)
pbinom(4, 12, 0.01)
pbinom(8, 24, 0.01)
pbinom(1, 10, 0.01)
pbinom(1, 100, 0.01)
pbinom(100, 100, 0.01)
1-dbinom(0, 10, 0.01)
dbinom(0, 10, 0.01)
dbinom(0, 100, 0.01)
dbinom(0, 15, 0.01)
dbinom(0, 50, 0.01)
dbinom(0, 10, 0.01)
x = c(10, 20, 30, 40, 50)
y = 2:4
x+y
iris
max(iris$Sepal.Length)
max(iris$Sepal.Length[iris$Species = "setosa"])
max(iris$Sepal.Length[iris$Species == "setosa"])
max(iris[iris[, 5] == "setosa", 1])
?aov
?boxplot
boxplot(iris)
?boxplot
iris$Sepal.Length
boxplot(iris$Species, data = iris$Sepal.Length)
iris$Species~iris$Sepal.Length
boxplot(iris$Species~iris$Sepal.Length, data = iris$Sepal.Length)
iris$Sepal.Length~iris$Species
PlantGrowth
PlantGrowth$weight~PlantGrowth$group
boxplot(iris$Species~iris$Sepal.Length, data = iris)
boxplot(iris$Sepal.Length~iris$Species, data = iris)
boxplot(iris$Sepal.Length~iris$Species, data = iris, xlab = "Species", ylab = "Sepal Length")
boxplot(iris$Sepal.Length~iris$Species, data = iris, xlab = "Species", ylab = "Sepal Length", main = "Boxplots of Iris Sepal Length by Species")
?anov
?aov
aov(iris$Sepal.Length~iris$Species, data = iris)
aov(iris$Sepal.Length~iris$Species)
aov(iris$Species ~ iris$Sepal.Length)
?count
iris$Species[, iris$Species == "virginica"]
aov(iris$Sepal.Length~iris$Species)
table(iris$Species)
aov(iris$Sepal.Length~iris$Species, data = iris$Sepal.Length)
aov(iris$Sepal.Length~iris$Species, data = iris)
aov(iris$Sepal.Length~as.factor(iris$Species)
exit
aov(iris$Sepal.Length~as.factor(iris$Species))
summary(iris$Sepal.Length~iris$Species)
aov(iris$Sepal.Length~iris$Species)
iris$Species
attach(iris)
aov(Sepal.Length~Species)
anova(lm(mtcars$mpg~as.factor(mtcars$cyl)))
anova(mtcars$mpg~as.factor(mtcars$cyl))
aov(mtcars$mpg~as.factor(mtcars$cyl))
anova(lm(Sepal.Length~Species))
detach(iris)
anova(lm(Sepal.Length~Species))
anova(lm(iris$Sepal.Length~iris$Species))
?TukeyHSD
sp_species = aov(iris$Sepal.Length~iris$Species)
summary(sp_species)
TukeyHSD(sp_species)
qqnorm(sp_species$residuals)
boxplot(iris$Sepal.Length~iris$Species, data = iris, xlab = "Species", ylab = "Sepal Length", main = "Boxplots of Iris Sepal Length by Species")
ChickWeight
ChickWeight[, ChickWeight$Time == 21]
ChickWeight[ChickWeight$Time == 21]
ChickWeight$weight[ChickWeight$Time == 21]
ChickWeight[, ChickWeight$Time == 21]
ChickWeight[., ChickWeight$Time == 21]
ChickWeight[., .(ChickWeight$Time == 21)]
subset(Chick)
subset(ChickWeight, ChickWeight$Time == 2)
subset(ChickWeight, ChickWeight$Time == 21)
final_chicks = subset(ChickWeight, ChickWeight$Time == 21)
boxplot(final_chicks$weight ~ final_chicks$diet, xlab = “Diet Type”, ylab = “Final Weight”, main = “Boxplots of Final Chick Weight by Diet”)
boxplot(final_chicks$weight ~ final_chicks$diet, xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
final_chicks
boxplot(final_chicks$weight~as.factor(final_chicks$diet), xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
boxplot(final_chicks$weight~final_chicks$diet, xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
boxplot(final_chicks$weight~final_chicks$diet, data = final_chicks, xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
boxplot(final_chicks$Weight~final_chicks$Diet, data = final_chicks, xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
final_chicks$Diet
boxplot(final_chicks$weight~final_chicks$Diet)
boxplot(final_chicks$weight~final_chicks$Diet, data = final_chicks, xlab = "Diet Type", ylab = "Final Weight", main = "Boxplots of Final Chick Weight by Diet")
anova(lm(final_weights$weight~final_weights$Diet))
anova(lm(final_chicks$weight~final_chicks$Diet))
weight_diet = aov(final_chicks$weight~final_chicks$Diet)
summary(weight_diet)
qqnorm(weight_diet)
qqnorm(weight_diet$residuals)
pairwise.t.test(x = final_chicks$weight, g = final_chicks$Diet, p.adj = "bonferroni")
?warpbreaks
warpbreaks
boxplot(warpbreaks$breaks~warpbreaks$wool+warpbreaks$tension, data = warpbreaks)
boxplot(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, data = warpbreaks)
boxplot(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, data = warpbreaks, colors = c("red", "blue", "yellow"))
boxplot(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, data = warpbreaks, colors = c("red", "blue", "yellow"))
boxplot(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, data = warpbreaks, col = c("red", "blue", "yellow"))
boxplot(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, data = warpbreaks, col = c("red", "blue", "yellow"), xlab = "Tension and Wool Type", ylab = "Breaks", main = "Boxplots of Breaks by Wool Type and Tension")
?warpbreaks
wt_breaks = aov(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool)
summary(wt_breaks)
?aov
wt_breaks = aov(warpbreaks$breaks~warpbreaks$tension+warpbreaks$wool, alpha = 0.1)
?warpbreaks
wt_breaks = aov(warpbreaks$breaks~warpbreaks$tension*warpbreaks$wool)
summary(wt_breaks)
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$wool
q
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$wool, trace.factor = warpbreaks$tension)
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$tension, trace.factor = warpbreaks$wool)
?interaction.plot
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$tension, trace.factor = warpbreaks$wool, trace.label = "Wool Type", xlab = "Tension", ylab = "Breaks")
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$tension, trace.factor = warpbreaks$wool, trace.label = "Wool Type", xlab = "Tension", ylab = "Breaks", main = "Interaction plot of Wool Breaks by Wool Type and Tension")
interaction.plot(response=warpbreaks$breaks, x.factor = warpbreaks$tension, trace.factor = warpbreaks$wool, trace.label = "Wool Type", xlab = "Tension", ylab = "Breaks", main = "Wool Breaks by Wool Type and Tension")
type_breaks = aov(warpbreaks$breaks~warpbreaks$wool)
summary(type_breaks)
iris
cor(iris[, 1:4])
cor(iris[, 1:4])
m1 = lm(iris$Sepal.Length~iris$Petal.Length)
plot(iris$Sepal.Length~iris$Petal.Length)
abline(m1)
m1$coefficients
?iris
plot(m1)
summary(m1)$r.squared
predict(m1, iris, interval = 'c', level = 0.95)
predict(m1, data.frame(iris$Petal.Length=3.8), interval = 'p')
m1
predict(m1, data.frame(Petal.Length=3.8), interval = 'p')
attach(iris)
predict(m1, data.frame(Petal.Length=3.8), interval = 'p')
m1 = lm(Sepal.Length~Petal.Length)
predict(m1, data.frame(Petal.Length=3.8), interval = 'p')
predict(m1, data.frame(Petal.Length=3.8), interval = 'p')$fit
?cor.test
cor.test(iris[,1:4])
cor.test(iris$Sepal.Length, iris$Petal.Length, alternative = 'two.sided')
names(iris)
source("C:/Users/advai/Desktop/STAT 35500/cor_test.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/cor_test.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/cor_test.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/cor_test.R")
?lm
?as.factor
attach(iris)
as.factor(Species)
Species
model_iris = lm(Sepal.Length~Petal.Length+Species)
model_iris
airquality
model_iris = lm(Sepal.Length~Petal.Length*Species)
model_iris
model_iris$coefficients
source("C:/Users/advai/Desktop/STAT 35500/test.R", echo=TRUE)
source("C:/Users/advai/Desktop/STAT 35500/test.R")
4.2131682 + -1.8056451
0.5422926 + 0.2859884
4.2131682 + -3.1535091
0.5422926 + 0.4534460
?as.numeric
source("C:/Users/advai/Desktop/STAT 35500/test.R")
attach(iris)
Sepal.L
Sepal.Length
model_iris = lm(Sepal.Length~Petal.Length*Species)
?predict
predict(model_iris)
df = data.frame(row.names=c('Petal.Length', 'Species'))
df
df = data.frame(c(4.8), c('virginica'))
df
names(df) = c('Petal.Length', 'Species')
df
predict(model_iris, df)
model_nointer = lm(Sepal.Length~Petal.Length+Species)
model_nointer
anova(model_iris, model_nointer)
summary(model_iris)
anova(model_iris, model_nointer)
?anova
summary(model_iris)
summary(model_iris)
model_nointer$coefficients
predict(mod2, data.frame(Petal.Length=3.9, Species='versicolor'), interval='confidence', level=.9)
predict(model_iris, data.frame(Petal.Length=3.9, Species='versicolor'), interval='confidence', level=.9)
predict(model_nointer, data.frame(Petal.Length=3.9, Species='versicolor'), interval='confidence', level=.9)
model_nointer$r.squared
model_nointer
summary(model_nointer)$r.squared
detach(iris)
LifeCycleSavings
attach(LifeCycleSavings)
LifeCycleSavings['Australia']
LifeCycleSavings[, 'Australia']
LifeCycleSavings[1]
LifeCycleSavings[, 1]
LifeCycleSavings.columns
LifeCycleSavings.names()
LifeCycleSavings.colnames()
type(LifeCycleSavings)
?type
typeof(LifeCycleSavings)
df = data.frame(LifeCycleSavings)
df
?LifeCycleSavings
mod_full = lm(sr~.^2, data = LifeCycleSavings)
summary(mod_full)
summary(mod_full).colnames()
type(summary(mod_full))
typeof(summary(mod_full))
summary(mod_full).colnames()$f
summary(mod_full).colnames()$r.squared
summary(mod_full)$r.squared
summary(mod_full)$f
step(mod_full)
summary(model_full)
summary(mod_full)
mod_red = lm(formula = sr ~ pop15 + dpi + ddpi + dpi:ddpi, data = LifeCycleSavings)
summary(mod_red)
anova(mod_full, mod_red)
summary(mod_red)
detach(LifeCycleSavings)
?beaver2
attach(beaver2)
tempF = (temp * 9/5) + 32
tempF
temp
?glm
glm(active~tempF)
beaver2
glm(activ~tempF)
alltemps = seq(min(tempF), max(tempF), len = 1000)
mod_fahr = glm(activ~tempF)
phats = predict(mod_fahr, data.Frame(tempF=alltemps), type='res')
phats = predict(mod_fahr, data.frame(tempF=alltemps), type='res')
lines(phats~alltemps, col=2)
plot(activ~tempF)
lines(phats~alltemps, col=2)
lines(phats~alltemps, col=2, lwd=2)
plot(activ~tempF)
lines(phats~alltemps, col=2, lwd=2)
phats
phats = predict(mod_fahr, data.frame(tempF=alltemps), type='response')
plot(activ~tempF)
lines(phats~alltemps, col=2, lwd=2)
?exp
mod_fahr
mod_fahr$coefficients[2]
exp(mod_fahr$coefficients[2])
predict(mod_fahr, data.frame(tempF=c(98.8), type='response')
e
predict(mod_fahr, data.frame(tempF=c(98.8)), type='response')
predict(mod_fahr, data.frame(tempF=c(99.8)), type='response')
detach(beaver2)
attach(iris)
Species
mtcars
mult_seplen = multinom(Species~Sepal.Length)
?Multinomial
?multinom
install.packages('nnet')
library(nnet)
mult_seplen = multinom(Species~Sepal.Length)
predict(mult_seplen, data.frame(Sepal.Length=6.3), type='probs')
round(predict(mult_seplen, data.frame(Sepal.Length=6.3), type='probs'), 3)
mult_sepwidth = multinom(Species~Sepal.Width)
predict(mult_sepwidth, data.frame(Sepal.Width=2.8), type=’probs’)
predict(mult_sepwidth, data.frame(Sepal.Width=2.8), type='probs')
mult_full = multinom(Species~.)
mult_full = multinom(Species~., data=iris)
predict(mult_full, data.frame(Sepal.Length=6.3, Sepal.Width=2.8, Petal.Length=5.1, Petal.Width=1.5), type='probs')
round(predict(mult_full, data.frame(Sepal.Length=6.3, Sepal.Width=2.8, Petal.Length=5.1, Petal.Width=1.5), type='probs'), 3)
iris
iris[, Sepal.Length==6.3]
iris[which(Sepal.Length==6.3),]
?which
iris[which(c(Sepal.Length==6.3, Sepal.Width==2.8)),]
iris[which(Sepal.Length==6.3 && Sepal.Width==2.8),]
install.packages("ggplot2")
setwd('../Desktop/ds-portfolio/Wine')
setwd('../Desktop/ds-portfolio/Wine Quality/')
df = read.csv('winequality-red.csv')
df
names(df)
df = read.csv('winequality-red.csv', sep=';')
df
